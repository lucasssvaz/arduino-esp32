name: Build Tools

on:
  workflow_call:
    inputs:
      os:
        type: string
        description: 'Operating system to build tools for'
        required: true
      container:
        type: string
        description: 'Container to use for building'
        required: false
      target:
        type: string
        description: 'Target to build tools for'
        required: true
      exten:
        type: string
        description: 'Extension of the binary'
        required: false
      separator:
        type: string
        description: 'Separator for the binary'
        required: true
      changed_files:
        type: string
        description: 'Changed files'
        required: true
    secrets:
      APP_ID:
        description: 'Push tools App ID'
        required: true
      APP_TOKEN:
        description: 'Push tools App Token'
        required: true
      CERTIFICATE:
        description: 'Certificate for signing'
        required: false
      CERTIFICATE_PASSWORD:
        description: 'Certificate password'
        required: false

concurrency:
  group: pytools-${{ github.event.pull_request.number || github.ref }}-${{ inputs.os }}
  cancel-in-progress: true

jobs:
  build-pytools-binaries:
    name: Build python tools binaries for ${{ inputs.os }}
    runs-on: ${{ inputs.os }}
    container: ${{ inputs.container }} # use python container on ARM
    env:
      DISTPATH: pytools-${{ inputs.target }}
      PIP_EXTRA_INDEX_URL: "https://dl.espressif.com/pypi"
    steps:
      - id: create_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_TOKEN }}

      - name: List changed tools
        shell: bash
        run: |
          CHANGED_FILES=()
          for file in ${{ inputs.changed_files }}; do
              file="${file#*\/}"
              file="${file%\.*}"
              CHANGED_FILES+=("$file")
          done
          CHANGED_FILES="${CHANGED_FILES[@]}"
          echo "CHANGED_TOOLS=$CHANGED_FILES" >> "$GITHUB_ENV"
          for tool in ${{ env.CHANGED_TOOLS }}; do
            echo "tool $tool was changed"
          done

      - name: Checkout user repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.create_token.outputs.token }}
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            /*
            !.github

      # To avoid giving unknown scripts elevated permissions, download them from the master branch
      - name: Get CI scripts from master (Linux and macOS)
        if: inputs.os != 'windows-latest'
        run: |
          mkdir -p .github
          cd .github
          curl https://codeload.github.com/${{ github.repository }}/tar.gz/master | tar -xz --strip=2 arduino-esp32-master/.github

      - name: Get CI scripts from master (Windows)
        if: inputs.os == 'windows-latest'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          New-Item -ItemType Directory -Path ".github"
          cd .github
          Invoke-RestMethod -Uri https://codeload.github.com/${{ github.repository }}/tar.gz/master -OutFile master.tar.gz
          tar -xzvf master.tar.gz --strip-components=2 arduino-esp32-master/.github
          Remove-Item -Path master.tar.gz

      - name: Set up Python 3.8
        # Skip setting python on ARM because of missing compatibility: https://github.com/actions/setup-python/issues/108
        if: inputs.os != 'ARM' && inputs.os != 'ARM64'
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller requests
      - name: Build with PyInstaller
        shell: bash
        run: |
          for tool in ${{ env.CHANGED_TOOLS }}; do
            pyinstaller --distpath ./${{ env.DISTPATH }} -F --icon=.github/pytools/espressif.ico tools/$tool.py
          done
      - name: Sign binaries
        if: inputs.os == 'windows-latest' && env.CERTIFICATE != ''
        env:
          CERTIFICATE: ${{ secrets.CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        shell: pwsh
        run: |
          $data = Write-Output ${{ env.CHANGED_TOOLS }}
          foreach ( $node in $data )
          {
            ./.github/pytools/Sign-File.ps1 -Path ./${{ env.DISTPATH }}/$node.exe
          }
      - name: Test binaries
        shell: bash
        run: |
          for tool in ${{ env.CHANGED_TOOLS }}; do
            ./${{ env.DISTPATH }}/$tool${{ inputs.EXTEN }} -h
          done
      - name: Push binary to tools
        if: inputs.os == 'windows-latest'
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        shell: bash
        run: |
          for tool in ${{ env.CHANGED_TOOLS }}; do
            cp -f ./${{ env.DISTPATH }}/$tool.exe tools/$tool.exe
          done
          bash .github/scripts/upload_py_tools.sh "${{ env.CHANGED_TOOLS }}"
      - name: Archive artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.DISTPATH }}
          path: ${{ env.DISTPATH }}
